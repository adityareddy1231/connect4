{"version":3,"sources":["Tile.js","App.js","serviceWorker.js","index.js"],"names":["Tile","tileClick","_this","props","dropCircle","col","colorClasses","board","this","row","column","undefined","react_default","a","createElement","className","onClick","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createBoard","tiles","rows","push","src_Tile","key","state","checkRows","j","i","winner","setState","checkColumns","checkDiagonalLeftToRight","checkDiagonalRightToLeft","checkWinner","currentPlayer","message","objectSpread","length","newColumn","concat","totalCircles","buttonClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2a3a5b3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Tile extends React.Component {\r\n  tileClick = () => {\r\n    this.props.dropCircle(this.props.col);\r\n  };\r\n\r\n  render() {\r\n    let colorClasses = \"tile\";\r\n    const board = this.props.board;\r\n    const row = this.props.row;\r\n    const column = this.props.col;\r\n\r\n    if (board[column][row] !== undefined) {\r\n      if (board[column][row] === \"Red\") {\r\n        colorClasses += \" red\";\r\n      } else {\r\n        colorClasses += \" black\";\r\n      }\r\n    }\r\n\r\n    return <div className={colorClasses} onClick={this.tileClick} />;\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\nimport Tile from \"./Tile\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currentPlayer: \"Red\",\n      board: [[], [], [], [], [], [], []],\n      message: \"New game has been started! Red's turn.\",\n      totalCircles: 0,\n      winner: \" \"\n    };\n  }\n\n  //initializing play board\n  createBoard = () => {\n    const tiles = [];\n    for (let row = 5; row >= 0; row--) {\n      const rows = [];\n      for (let col = 0; col <= 6; col++) {\n        rows.push(\n          <Tile\n            key={col}\n            row={row}\n            col={col}\n            dropCircle={this.dropCircle}\n            board={this.state.board}\n          />\n        );\n      }\n      tiles.push(\n        <div key={row} className=\"row\">\n          {rows}\n        </div>\n      );\n    }\n    return tiles;\n  };\n\n  //Checking horizontal victory\n  checkRows = board => {\n    for (let j = 0; j < 6; j++) {\n      for (let i = 0; i < 4; i++) {\n        if (\n          board[i][j] !== undefined &&\n          board[i + 1][j] !== undefined &&\n          board[i + 2][j] !== undefined &&\n          board[i + 3][j] !== undefined\n        ) {\n          if (\n            board[i][j] === board[i + 1][j] &&\n            board[i][j] === board[i + 2][j] &&\n            board[i][j] === board[i + 3][j]\n          ) {\n            const winner = board[i][j];\n            this.setState({ winner: winner });\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  //Checking vertical victory\n  checkColumns = board => {\n    for (let i = 0; i < 7; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (\n          board[i][j] !== undefined &&\n          board[i][j + 1] !== undefined &&\n          board[i][j + 2] !== undefined &&\n          board[i][j + 3] !== undefined\n        ) {\n          if (\n            board[i][j] === board[i][j + 1] &&\n            board[i][j] === board[i][j + 2] &&\n            board[i][j] === board[i][j + 3]\n          ) {\n            const winner = board[i][j];\n            this.setState({ winner: winner });\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  //Checking diagonal victory\n  checkDiagonalLeftToRight = board => {\n    for (let j = 0; j < 3; j++) {\n      for (let i = 0; i < 4; i++) {\n        if (\n          board[i][j] !== undefined &&\n          board[i + 1][j + 1] !== undefined &&\n          board[i + 2][j + 2] !== undefined &&\n          board[i + 3][j + 3] !== undefined\n        ) {\n          if (\n            board[i][j] === board[i + 1][j + 1] &&\n            board[i][j] === board[i + 2][j + 2] &&\n            board[i][j] === board[i + 3][j + 3]\n          ) {\n            const winner = board[i][j];\n            this.setState({ winner: winner });\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  //Checking anti-diagonal victory\n  checkDiagonalRightToLeft = board => {\n    for (let i = 6; i >= 3; i--) {\n      for (let j = 0; j < 3; j++) {\n        if (\n          board[i][j] !== undefined &&\n          board[i - 1][j + 1] !== undefined &&\n          board[i - 2][j + 2] !== undefined &&\n          board[i - 3][j + 3] !== undefined\n        ) {\n          if (\n            board[i][j] === board[i - 1][j + 1] &&\n            board[i][j] === board[i - 2][j + 2] &&\n            board[i][j] === board[i - 3][j + 3]\n          ) {\n            const winner = board[i][j];\n            this.setState({ winner: winner });\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  //Checking for winner and setting message\n  checkWinner = currentPlayer => {\n    if (\n      this.checkRows(this.state.board) === true ||\n      this.checkColumns(this.state.board) === true ||\n      this.checkDiagonalLeftToRight(this.state.board) === true ||\n      this.checkDiagonalRightToLeft(this.state.board) === true\n    ) {\n      if (currentPlayer === \"Red\") {\n        this.setState({\n          message: \"Game Over! Black wins!\"\n        });\n      } else {\n        this.setState({\n          message: \"Game Over! Red wins!\"\n        });\n      }\n      return true;\n    }\n    return false;\n  };\n\n  //Simulating dropping of play piece\n  dropCircle = column => {\n    let state = { ...this.state };\n\n    //Game still in progress\n    if (this.checkWinner() !== true) {\n      //Checking if column is full - Adding dropped values - Increasing Circle Count\n      if (state.board[column].length < 6) {\n        const newColumn = state.board[column].concat(state.currentPlayer);\n        state.board[column] = newColumn;\n        state.totalCircles++;\n\n        let message = \"\";\n\n        //Checking for draw game\n        if (state.totalCircles === 42) {\n          message = \"Draw game! Please start a new one.\";\n        } else {\n          message = \"Game in progress! \" + state.currentPlayer + \"'s turn.\";\n        }\n\n        //Changing current player\n        state.currentPlayer = state.currentPlayer === \"Red\" ? \"Black\" : \"Red\";\n\n        //Setting new state\n        this.setState({\n          board: state.board,\n          currentPlayer: state.currentPlayer,\n          totalCircles: state.totalCircles,\n          message: message\n        });\n\n        //Checking for winner after previous move\n        this.checkWinner(state.currentPlayer);\n      } else {\n        //Column is already full\n        let message = \";\";\n        if (state.totalCircles === 42) {\n          message = \"Draw game! Please start a new one.\";\n        } else {\n          message =\n            \"Game in progress! \" +\n            state.currentPlayer +\n            \"'s turn. That column is full. Please drop into another column!\";\n        }\n        this.setState({ message: message });\n      }\n    } else {\n      //Game Over with Victory\n      this.setState({\n        message: \"Game is over! \" + this.state.winner + \" wins! Please restart.\"\n      });\n    }\n  };\n\n  //Restart button\n  buttonClick = () => {\n    const state = {\n      currentPlayer: \"Red\",\n      board: [[], [], [], [], [], [], []],\n      message: \"New game has been started! Red's turn.\",\n      totalCircles: 0\n    };\n\n    this.setState({\n      board: state.board,\n      currentPlayer: state.currentPlayer,\n      totalCircles: state.totalCircles,\n      message: state.message\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"header\">Connect 4 Game</p>\n        <p className=\"message\">{this.state.message}</p>\n        <div className=\"board\">{this.createBoard()}</div>\n        <p>\n          <button className=\"button\" onClick={this.buttonClick}>\n            Restart the game!\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}